// <auto-generated />
using System;
using Crayon.CSS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Crayon.CSS.Persistence.Migrations
{
    [DbContext(typeof(CSSDBContext))]
    [Migration("20250221123532_AddSoftwareNameInSoftwareLicense")]
    partial class AddSoftwareNameInSoftwareLicense
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Crayon.CSS.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Customer1 Primary",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Customer1 Secondary",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Customer2 Main",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "Customer3 Core",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Crayon.CSS.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            Name = "Customer1",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            Name = "Customer2",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            Name = "Customer3",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Crayon.CSS.Domain.Entities.SoftwareLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SoftwareName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("SoftwareLicenses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb23fb79-791d-423d-8da2-0543db31778d"),
                            AccountId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 100,
                            SoftwareName = "Microsoft Teams",
                            State = "Active",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e4b367c8-d8e0-437c-bc7b-089fb1b79fe6"),
                            AccountId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 200,
                            SoftwareName = "Microsoft Teams",
                            State = "Active",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("94355fb5-45bc-41f1-ae1d-402d2dd4895b"),
                            AccountId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 300,
                            SoftwareName = "Microsoft Teams",
                            State = "Active",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ee517cfb-5470-4ce5-bdf1-eef88fca7ccb"),
                            AccountId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 50,
                            SoftwareName = "Microsoft Teams",
                            State = "Active",
                            UpdatedAt = new DateTime(2025, 2, 20, 10, 15, 32, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Crayon.CSS.Domain.Entities.Account", b =>
                {
                    b.HasOne("Crayon.CSS.Domain.Entities.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Crayon.CSS.Domain.Entities.SoftwareLicense", b =>
                {
                    b.HasOne("Crayon.CSS.Domain.Entities.Account", "Account")
                        .WithMany("SoftwareLicenses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Crayon.CSS.Domain.Entities.Account", b =>
                {
                    b.Navigation("SoftwareLicenses");
                });

            modelBuilder.Entity("Crayon.CSS.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
